#TASK 1
import numpy as np
import pandas as pd

# Заданные значения
zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

# Ковариация "вручную"
mean_zp = np.mean(zp)
mean_ks = np.mean(ks)
cov_manual = np.sum((zp - mean_zp) * (ks - mean_ks)) / (len(zp) - 1)

# Ковариация с использованием функции из numpy
cov_numpy = np.cov(zp, ks, ddof=1)[0, 1]

# Коэффициент корреляции Пирсона "вручную"
std_zp = np.std(zp, ddof=1)
std_ks = np.std(ks, ddof=1)
corr_manual = cov_manual / (std_zp * std_ks)

# Коэффициент корреляции Пирсона с использованием функций из numpy и pandas
corr_numpy = np.corrcoef(zp, ks)[0, 1]
corr_pandas = pd.Series(zp).corr(pd.Series(ks))

# Вывод результатов
print(f"Ковариация (вручную): {cov_manual}")
print(f"Ковариация (numpy): {cov_numpy}")
print(f"Коэффициент корреляции (вручную): {corr_manual}")
print(f"Коэффициент корреляции (numpy): {corr_numpy}")
print(f"Коэффициент корреляции (pandas): {corr_pandas}")

# TASK 2
import numpy as np
from scipy.stats import norm

# Заданные значения
iq_scores = np.array([131, 125, 115, 122, 131, 115, 107, 99, 125, 111])

# Уровень доверия
confidence_level = 0.95

# Среднее значение выборки
mean_iq = np.mean(iq_scores)

# Стандартное отклонение генеральной совокупности
population_std_dev = np.std(iq_scores, ddof=1)

# Размер выборки
sample_size = len(iq_scores)

# Z-значение для уровня доверия
z_value = norm.ppf((1 + confidence_level) / 2)

# Вычисление доверительного интервала
margin_of_error = z_value * (population_std_dev / np.sqrt(sample_size))
confidence_interval = (mean_iq - margin_of_error, mean_iq + margin_of_error)

# Вывод результатов
print(f"Доверительный интервал: {confidence_interval} при надежности {confidence_level}")


#TASK 3

import numpy as np
from scipy.stats import norm

# Известные значения
sample_mean = 174.2
population_variance = 25
sample_size = 27
confidence_level = 0.95

# Вычисление стандартного отклонения генеральной совокупности
population_std_dev = np.sqrt(population_variance)

# Z-значение для уровня доверия
z_value = norm.ppf((1 + confidence_level) / 2)

# Вычисление доверительного интервала
margin_of_error = z_value * (population_std_dev / np.sqrt(sample_size))
confidence_interval = (sample_mean - margin_of_error, sample_mean + margin_of_error)

# Вывод результатов
print(f"Доверительный интервал: {confidence_interval} при надежности {confidence_level}")



  

